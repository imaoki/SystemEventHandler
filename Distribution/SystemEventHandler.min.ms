/*! Â© 2022 imaoki | MIT License | https://github.com/imaoki */;(local hasMetRequirements;fn hasMetRequirements = (isStruct ::std and isProperty ::std #StructName and classOf ::std.StructName == MAXScriptFunction and ::std.StructName() == #StandardStruct;);if not hasMetRequirements() do (local fileClass = DotNetClass "System.IO.File";local pathClass = DotNetClass "System.IO.Path";local currentDir = pathClass.GetDirectoryName (getSourceFileName());local standardFile = currentDir + @"\Standard.min.ms";if fileClass.Exists standardFile do fileIn standardFile;);if not hasMetRequirements() do (format "[error]Requirement not met.\n";););global systemEventHandler;struct SystemEventHandlerStruct (private delayTimerTable,private eventParamTable,private observerTable,private globalVarName = "systemEventHandler",public fn Add eventType observer delayInterval:0 = (if not hasDictValue this.delayTimerTable eventType do (local delayTimer = this.createDelayTimer (delayInterval as Integer);this.delayTimerTable[eventType] = delayTimer;);if this.findObserver eventType observer == 0 do (if not hasDictValue this.observerTable eventType do (this.observerTable[eventType] = #(););append this.observerTable[eventType] observer;);if this.GetRegisteredCallbackCount eventType == 0 do (case eventType of ((#TimeChange): this.registerTimeChangeCallback();(#ViewportRedraw): this.registerViewportRedrawCallback();default: this.registerGeneralEventCallback eventType;););this.findObserver eventType observer > 0;),public fn GetRegisteredCallbackCount eventType = (local count = 0;case eventType of ((#TimeChange): (local callbackInfos = showRegisteredTimeCallbacks asArray:true;for callbackInfo in callbackInfos do (if classOf callbackInfo == Array and callbackInfo.Count == 3 and callbackInfo[3] == this.InvokeTimeChange do (count += 1;);););(#ViewportRedraw): (local callbackInfos = showRegisteredRedrawViewsCallbacks asArray:true;for callbackInfo in callbackInfos do (if classOf callbackInfo == Array and callbackInfo.Count == 3 and callbackInfo[3] == this.InvokeViewportRedraw do (count += 1;);););default: (count = (Callbacks.Show eventType asArray:true id:#SystemEventHandler).Count;););count;),public fn Install = (::SystemEventHandlerStruct();if isProperty ::startupLoader #RegisterFile do (::startupLoader.RegisterFile (getSourceFileName()););format "[install]::systemEventHandler\n";ok;),public fn InvokeGeneralEvent eventType eventParam = (this.invokeTimer eventType eventParam;ok;),public fn InvokeObserver type param = (if this.isValidTimer param and param.GetTicks() > 0 do (param.Reset();case type of ((#Ticks): (local eventType = this.getEventTypeFromTimer param;if classOf eventType == Name do (local eventParam = this.getEventParam eventType;local observers = this.observerTable[eventType];for observer in observers do (observer eventType eventParam;);););default: ();););ok;),public fn InvokeTimeChange = (this.invokeTimer #TimeChange (copy ::currentTime);ok;),public fn InvokeViewportRedraw = (this.invokeTimer #ViewportRedraw undefined;ok;),public fn Remove eventType observer = (local index = this.findObserver eventType observer;if index > 0 do (deleteItem this.observerTable[eventType] index;if this.observerTable[eventType].Count == 0 do (case eventType of ((#TimeChange): this.unregisterTimeChangeCallback();(#ViewportRedraw): this.unregisterViewportRedrawCallback();default: this.unregisterGeneralEventCallback eventType;);removeDictValue this.delayTimerTable eventType;removeDictValue this.eventParamTable eventType;removeDictValue this.observerTable eventType;););this.findObserver eventType observer <= 0;),public fn Uninstall = (this.unregisterAllCallbacks();if isProperty ::startupLoader #UnregisterFile do (::startupLoader.UnregisterFile (getSourceFileName()););::systemEventHandler = undefined;format "[uninstall]::systemEventHandler\n";ok;),private fn createDelayTimer delayInterval = (local timerObject = ::std.TimerStruct delayInterval;timerObject.StateChanged.Subscribe this.InvokeObserver;timerObject;),private fn findObserver eventType observer = (local index = -1;if classOf observer == MAXScriptFunction do (index = 0;);if index == 0 and hasDictValue this.observerTable eventType do (local observers = this.observerTable[eventType];if classOf observers == Array do (for i = 1 to observers.Count while index == 0 do (if observers[i] == observer do (index = i;););););index;),private fn generateGeneralEventScript eventType = (local script = StringStream "";format "::%.InvokeGeneralEvent % (Callbacks.NotificationParam())" this.globalVarName eventType to:script;script as String;),private fn getEventParam eventType = (local eventParam = undefined;if hasDictValue this.eventParamTable eventType do (eventParam = this.eventParamTable[eventType];if isDeleted eventParam do (eventParam = undefined;););eventParam;),private fn getEventTypeFromTimer timerObject = (local eventType = undefined;for key in this.delayTimerTable.Keys while eventType == undefined do (local delayTimer = this.delayTimerTable[key];if delayTimer.Equals timerObject do (eventType = key;););eventType;),private fn invokeTimer eventType eventParam = (this.eventParamTable[eventType] = eventParam;local delayTimer = this.delayTimerTable[eventType];if this.isValidTimer delayTimer do (if delayTimer.IsEnabled() then (if delayTimer.GetTicks() > 0 then (delayTimer.Reset(););else (delayTimer.Restart();););else (if delayTimer.GetInterval() == 0 then (delayTimer.UpdateTicks(););else (delayTimer.Start(););););ok;),private fn isValidTimer obj = (isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == #TimerStruct;),private fn registerGeneralEventCallback eventType = (local script = this.generateGeneralEventScript eventType;Callbacks.AddScript eventType script id:#SystemEventHandler;ok;),private fn registerTimeChangeCallback = (registerTimeCallback this.InvokeTimeChange;ok;),private fn registerViewportRedrawCallback = (registerRedrawViewsCallback this.InvokeViewportRedraw;ok;),private fn unregisterAllCallbacks = (for eventType in this.observerTable.Keys do (case eventType of ((#TimeChange): this.unregisterTimeChangeCallback();(#ViewportRedraw): this.unregisterViewportRedrawCallback();default: this.unregisterGeneralEventCallback eventType;););),private fn unregisterGeneralEventCallback eventType = (Callbacks.RemoveScripts eventType id:#SystemEventHandler;ok;),private fn unregisterTimeChangeCallback = (unregisterTimeCallback this.InvokeTimeChange;ok;),private fn unregisterViewportRedrawCallback = (unregisterRedrawViewsCallback this.InvokeViewportRedraw;ok;),private version = "1.3.0",public fn StructName = #SystemEventHandlerStruct,public fn Dump indent:"" out:listener = (format "%SystemEventHandlerStruct\n" indent to:out;format "%  globalVarName:\"%\"\n" indent this.globalVarName to:out;format "%  delayTimerTable:%\n" indent this.delayTimerTable.Count to:out;for key in this.delayTimerTable.Keys do (format "%    [%]:\n" indent (::std.StringUtility.ToPascalCase key) to:out;this.delayTimerTable[key].Dump indent:(indent + "      ") out:out;);format "%  eventParamTable:%\n" indent this.eventParamTable.Count to:out;for key in this.eventParamTable.Keys do (format "%    [%]:%\n" indent (::std.StringUtility.ToPascalCase key) this.eventParamTable[key] to:out;);format "%  observerTable:%\n" indent this.observerTable.Count to:out;for key in this.observerTable.Keys do (format "%    [%]:%\n" indent (::std.StringUtility.ToPascalCase key) this.observerTable[key].Count to:out;);ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true;isEqualStructName and isEqualProperties;),public fn GetVersion = (this.version;),on Create do (::systemEventHandler = this;this.delayTimerTable = Dictionary #Name;this.eventParamTable = Dictionary #Name;this.observerTable = Dictionary #Name;););::SystemEventHandlerStruct.Install();::SystemEventHandlerStruct
